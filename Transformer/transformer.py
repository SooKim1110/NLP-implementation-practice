# 출처: https://nlp.seas.harvard.edu/2018/04/03/attention.html

"""AnnotatedTransformer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WYuyprWunFcJnfBfzsKc-0_Qrnvu1JmJ
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import math, copy, time
from torch.autograd import Variable
import matplotlib.pyplot as ply
import seaborn
seaborn.set_context(context = "talk")
# %matplotlib inline

"""# **인코더-디코더 정의**"""

# 전체 인코더-디코더 구조

class EncoderDecoder(nn.Module):
  def __init__ (self, encoder, decoder, src_embed, tgt_embed, generator):
    super(EncoderDecoder, self).__init__()
    self.encoder = encoder
    self.decoder = decoder
    self.src_embed = src_embed
    self.tgt_embed = tgt_embed 
    self.generator = generator

  def forward(self, src, tgt, src_mask, tgt_mask):
    #masked src, tgt 시퀀스를 받아서 계산한다 
    return self.decode(self.encode(src, src_mask), src_mask, tgt, tgt_mask)
  
  def encode(self, src, src_mask):
    return self.encoder(self.src_embed(src), src_mask)
  
  def decode(self, memory, src_mask, tgt, tgt_mask):
    return self.decoder(self.tgt_embed(tgt), memory, src_mask, tgt_mask)

# 다음으로 올 심볼을 생성하는 generator 정의
# auto-regressive: 이전에 생성된 심볼들을 인풋에 추가하여 다음 심볼 생성하는데 사용

class Generator(nn.Modele):
  #linar + softmax 사용해서 생성
  def __init__ (self, d_model, vocab):
    super(Generator, self).__init__()
    self.proj = nn.Linear(d_model, vocab)
  
  def forward(self, x):
    #행별로 계산
    return F.log_softmax(self.proj(x), dim = -1)

"""# **인코더 정의**"""

# 인코더, 디코더 스택
# 트랜스포머에서는 인코더, 디코더 블록을 여러개 쌓아서 사용한다

def clones(module, N):
  return nn.ModuleList([copy.deepcopy(module)] for _ in range(N))

# 전체 인코더 구조

class Encoder(nn.Module):
  def __init__(self, layer, N):
    super(Encoder,self).__init__()
    self.layers = clones(layer, N)
    self.norm = LayerNorm(layer.size)
  
  def forward(self, x, mask):
    # input 과 mask이 레이어들을 순서대로 거치도록 전달하고 최종 결과는 norm해준다
    for layer in self.layers:
      x = layer(x, mask)
    return self.norm(x)

# 두 서브레이어마다 residual connection(기존 학습 보존 + 추가적으로 학습), layer normalization(https://melfm.github.io/posts/2018-08-Understanding-Normalization/) 참고
# 각 서브레이어 아웃풋 : LayerNorm(x + Sublayer(x))

class LayerNorm(nn.Module):
  def __init__(self, features, eps = 1e-6):
    super(LayerNorm, self).__init__()
    self.a_2 = nn.Parameter(torch.ones(features))
    self.b_2 = nn.Parameter(torch.zeros(features))
    self.eps = eps
  def forward(self, x):
    mean = x.mean(-1, keepdim= True)
    std = x.std(-1, keepdim = True)
    return self.a_2 * (x-mean) / (std+ self.eps) + self.b_2


class SublayerConnection(nn.Module):
  def __init__(self, size, dropout):
    super(SublayerConnection, self).__init__()
    self.norm = LayerNorm(size)
    self.dropout = nn.Dropout(dropout)
  
  def forward(self, x, sublayer):
    #residual connection
    return x + self.dropout(sublayer(self.norm(x)))

# 인코더 레이어 
# 2개의 서브레이어(multi-head self attention, position-wise fully connected feed-forward)로 구성

class EncoderLayer(nn.Module):
  def _init__(self, size, self_attn, feed_forward, dropout):
    super(EncoderLayer, self).__init__()
    self.self_attn = self_attn
    self.feed_forward = feed_forward
    self.sublayer = clones(SublayerConnection(size,dropout), 2)
    self.size = size

  def forward(self, x, mask):
    x = self.sublayer[0](x, lambda x: self.self_atn(x,x,x,mask))
    return self.sublayer[1](x, self.feed_forward)

"""# **디코더 정의**"""

# 전체 디코더 구조
class Decoder(nn.Module):
    def __init__ (self, layer, N):
      super(Decoder, self).__init___()
      self.layers = clones(layer, N)
      self.norm = LayerNorm(layer.size)
    
    def forward(self, x, memory, src_mask, tgt_mask):
      for layer in self.layers:
        x = layer(x, memory, src_mask, tgt_mask)
      return self.norm(x)

# 디코더 레이어 
# 3개의 서브레이어(masked multi-head attention, multi-head attention, feed forward) 
class DecoderLayer(nn.Module):
  def __init__(self, size, self_attn, src_attn, feed_forward, dropout):
    super(DecoderLayer, self).__init__()
    self.size = size
    self.self_attn = self_attn
    self.src_attn = src_attn
    self.feed_forward = feed_forward
    self.sublayer = clones(SublayerConnection(size, dropout),3)

  def forward(self, x, memory, src_mask, tgt_mask):
    m = memory
    x = self.sublayer[0](x, lambda x: self.self_attn(x,x,x,tgt_mask))
    x = self.sublayer[1](x, lambda x: self.src_attn(x,m,m,src_mask))
    return self.sublayer[2](x, self.feed_forward)

# test time에는 현재 단어까지만 볼 수 있으므로 upper triangle 부분을 masking

def subsequent_mask(size):
  attn_shape = (1,size,size)
  subsequent_mask = np.triu(np.ones(attn_shape), k=1).astype('unit8')
  return torch.from_numpy(subsequent_mask) == 0

"""# **Attention**"""

